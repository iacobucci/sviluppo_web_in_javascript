motif
	ritorno a fare video su youtube dopo 10 anni
	ci sono milioni di guide online di javascript, che senso ha farne un altro?
		il modo in cui lo avrei voluto imparare io
			teorico
				infrastrutture web
				architettura software
				modellazione relazionale dei dati
				pattern mvc
			pratico
				caso di studio del gestionale
			ordinato
				si costruisce dal nucleo verso l'interfaccia
			controesempi per capire i boundaries della applicabilità delle varie idee
		scrivere è fare ordine delle idee
			ho raffinato la mia conoscenza di javascript ed imparato cose nuove
		fare pratica nell'insegnamento
			avere una voce su youtube è un'abilità da allenare
			con un progetto come questo aumenta l'accountability e l'autorevolezza
		creare contenuti per canale youtube
			punto di partenza per la creazione di nuovi corsi/esposizioni
			lo sviluppo web è un campo così vasto e si presta bene ad una spiegazione modulare
		avere un progetto cumulativo nel portfolio
			di tutte le tecnologie web essenziali
			con opinioni personali e best practices
		insegnare a mio padre
			il caso di studio è basato su una sua attività professionale
	perchè le slides e non animazioni, scrittura di codice, laoratorio interattivo?
		sono veloci da scrivere
			ho energia limitata da impiegare in questo progetto
			con mermarpidsome posso scrivere markdown, aggiungere diagrammi, visualizzare una preview in tempo reale ed esportare in pdf
		sono estensibili con pull request
			chiunque può contribuire su github
		le slide dirigono il discorso
			parlare con uno script
		estrema concisione
			quando si consultano le slide magari si trova subito la risposta
		scritte in markdown
			portabili su pagine web
			esportabili in pdf
		contenuti aggiuntivi
			file sorgenti
			esercizi
		mia tesi di laurea
	perchè studiare javascript e lo sviluppo web, se ci sono i large language model e l'intelligenza artificiale che scrive codice per noi?
		javascript contro altri linguaggi
		douglas crockford contro javascript
		sistema complesso da conoscere
		un informatico deve avere una buona nozione intuitiva di come funziona internet
		stimola l'intelligenza

slides
	1 scripting
		obiettivo del corso
			applicazioni web
				distribuzione multi-piattaforma ed aggiornamenti continui
				api browser
				pwa, spa, ssr
				advertising
			javascript
				unico linguaggio di programmazione
				facile gestione delle risorse
				paradigmi
					imperativo
					oop
					funzionale
					reattivo
			tecnologie open source
				comunità
				security through transparency
				free as in freedom
		consulta anche
			canali youtube
				coding train
					coding creativo
				fireship
					guide rapide per tecnologie moderne
			references
				w3schools
					tutorial introduttivi
				mdn web docs
					documentazione ufficiale mozilla
				ecma international
					standardizzazione javascript
			piattaforme di condivisione
				codepen
					portfolio frontendisti
				github
					repository di codice open source
		caso di studio
			gestionale per amministrazione di condomini
				utente
					registrazione
					login
					dashboard
				amministratore
					login
					dashboard
				dashboard
					utente
						visualizza condominio
						visualizza pagamento
					admin
						gestisci condominio
						gestisci residenti
						gestisci pagamento
		linux
			sviluppo e distribuzione
			apt install nodejs npm docker git
		visual studio code
			ide
			syntax highlighting
			completamneto automatico
			debugger
			git
			palette
			estensioni
				html css support
				eslint
		node
			repl
				console.log("hello world");
			script
				test.js
		scripting
			istruzioni
				sequenza
				condizione
				loop
			modello single threaded
			non blocking event loop
		variabili
			nomi
			valore
			dichiarazione
			assegamento
			riassegnamento
				dinamico
				variabile
			costanti
			tipi
				undefined
				null
				number
				string
				boolean
				object
		scoping
			località
			visibilità
			blocco
		operazioni
			aritmetiche
				somma
				differenza
				prodotto
				quoziente
				modulo
			precedenza
				parentesi
			incremento
				++
				--
				+=
			concatenazione
			Math
				cos
				sin
				exp
				log
				sqrt
				pow
		operazioni booleane
			ogni funzione logica in combinazione
			true
			false
			base
				not
				and
				or
			composte
				nand
		controllo del flusso
			comparazione
				==
				!=
				>
				<
				>=
				<=
			condizione
				if
				else if
				else
			operatore ternario
				(condizione) ? vero : falso
		cicli
			ripetere un bloco di istruzioni
			for
				terminazione prevedibile
				for(let x = 0; x < n; x++)
			innestamento
		while
			terminazione non prevedibile
			while(condizione)
				break
		funzioni
			procedure
			dichiarate
				function somma() {}
				let somma = function() {}
				let prodotto = () => {}
			definite
				parametri
				valore di ritorno
			chiamate
				argomenti
			chiamata nidificata
				l'rvalue viene valutato dal più interno al più esterno
			ricorsione
				stack della chiamata
		try-catch
			1/0
				NaN
			throw
			try
			catch
				return
			finally
		funzioni di callback
			passate come argomento
			chiamate successivamente
		debugger
			breakpoint
			step over
			variables
			call stack
			
	2 browser
		bundling per retrocompatibilità
			ES5

	3 controller
		pattern mvc
			fat client vs mvc
		localhost
		node init
		package.json
			type
				module
			script
				start
					node index.js
		npm install
			viene creato package-lock.json
			express
				json
				risposte con json
			nodemon
			body-parser
		tutorial
			asincronia
			import export
				https://www.digitalocean.com/community/tutorials/js-modules-es6
		esercizi
			risolvere più promises in parallelo



	4 model
		docker database
		npm install sequelize typescript

		typeorm


		tipizzazione
			perchè
				errore di battitura
				errore di tipo
				errore di logica
			jsdocs
			typescript

		typescript
			npm install ts-node typescript @types/express
				npx tsc --init
			forte impronta verso tipizzazione statica
				da mettere da suubito all'interno della sezione su db (cap 4)
			simulazione di comportamento classico oop
			in un diagramma uml i dati scorrono
				parametri passati a metodi
				proprietà di istanza
					novita
					simili a proprieta degli oggetti
				variabili statiche/globali
				addirittura ci sono i modules
			
		tutorial
			classi
			duck typing
		
		collegamento con admin.js
			asincronia
				promise
					then
				async
					await

	5 view
		components
		internationalization
		server side rendering
		nuxt
		vue
			npm install -g @vue/cli
			npx vue create .
				manually select features
				deselezionare babel
				deselezionare linter / formatter
				selezionare router
				scegliere yes per history mode
				scegliere config files dedicati
				vue 3.0
				scegliere se impostare questo come progetto predefinito
			rm
				.browserlistrc
				.jsconfig.json
			in package.json
				npx vue-cli-service build --watch
			patterns
				props
				emitter
				refs
					non trattato
					anti-pattern
		express per far funzionare il router
			app.use(express.static(path.join(__dirname, 'dist')));
			app.get('*', (req, res) => {
				res.sendFile(path.join(__dirname, 'dist/index.html'));
			});
		webpack
		admin
			dashboard
			download database
			upload database
		nuxt
	
		
